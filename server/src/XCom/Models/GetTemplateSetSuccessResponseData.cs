/*
 * XCom.API
 *
 * This API is responsible for enabling communication with SendGrid. It implements additional features such as data retention and A/B Testing for specific templates
 *
 * The version of the OpenAPI document: 4.0
 * Contact: phil.hotchkiss@veteransunited.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using XCom.Converters;

namespace XCom.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GetTemplateSetSuccessResponseData : IEquatable<GetTemplateSetSuccessResponseData>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime Updated { get; set; }

        /// <summary>
        /// Gets or Sets Deleted
        /// </summary>
        [DataMember(Name="deleted", EmitDefaultValue=false)]
        public DateTime Deleted { get; set; }

        /// <summary>
        /// This will be the name by which you identify the template set. It must be unique.
        /// </summary>
        /// <value>This will be the name by which you identify the template set. It must be unique.</value>
        [DataMember(Name="templateSetName", EmitDefaultValue=false)]
        public string TemplateSetName { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// These are the send grid templates that are going to be used for your multi-variate email
        /// </summary>
        /// <value>These are the send grid templates that are going to be used for your multi-variate email</value>
        [DataMember(Name="variations", EmitDefaultValue=false)]
        public List<Variation> Variations { get; set; }

        /// <summary>
        /// Gets or Sets RateLimit
        /// </summary>
        [DataMember(Name="rateLimit", EmitDefaultValue=false)]
        public RateLimit RateLimit { get; set; }

        /// <summary>
        /// This property is used to describe the template set use case
        /// </summary>
        /// <value>This property is used to describe the template set use case</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Bcc
        /// </summary>
        [DataMember(Name="bcc", EmitDefaultValue=false)]
        public List<Recipient> Bcc { get; set; }

        /// <summary>
        /// Indicates whether or not attachments are enabled for the designated template
        /// </summary>
        /// <value>Indicates whether or not attachments are enabled for the designated template</value>
        [DataMember(Name="attachmentsEnabled", EmitDefaultValue=true)]
        public bool AttachmentsEnabled { get; set; } = true;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetTemplateSetSuccessResponseData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  TemplateSetName: ").Append(TemplateSetName).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Variations: ").Append(Variations).Append("\n");
            sb.Append("  RateLimit: ").Append(RateLimit).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  AttachmentsEnabled: ").Append(AttachmentsEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetTemplateSetSuccessResponseData)obj);
        }

        /// <summary>
        /// Returns true if GetTemplateSetSuccessResponseData instances are equal
        /// </summary>
        /// <param name="other">Instance of GetTemplateSetSuccessResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetTemplateSetSuccessResponseData other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Updated == other.Updated ||
                    Updated != null &&
                    Updated.Equals(other.Updated)
                ) && 
                (
                    Deleted == other.Deleted ||
                    Deleted != null &&
                    Deleted.Equals(other.Deleted)
                ) && 
                (
                    TemplateSetName == other.TemplateSetName ||
                    TemplateSetName != null &&
                    TemplateSetName.Equals(other.TemplateSetName)
                ) && 
                (
                    Categories == other.Categories ||
                    Categories != null &&
                    other.Categories != null &&
                    Categories.SequenceEqual(other.Categories)
                ) && 
                (
                    Variations == other.Variations ||
                    Variations != null &&
                    other.Variations != null &&
                    Variations.SequenceEqual(other.Variations)
                ) && 
                (
                    RateLimit == other.RateLimit ||
                    RateLimit != null &&
                    RateLimit.Equals(other.RateLimit)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Bcc == other.Bcc ||
                    Bcc != null &&
                    other.Bcc != null &&
                    Bcc.SequenceEqual(other.Bcc)
                ) && 
                (
                    AttachmentsEnabled == other.AttachmentsEnabled ||
                    
                    AttachmentsEnabled.Equals(other.AttachmentsEnabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Updated != null)
                    hashCode = hashCode * 59 + Updated.GetHashCode();
                    if (Deleted != null)
                    hashCode = hashCode * 59 + Deleted.GetHashCode();
                    if (TemplateSetName != null)
                    hashCode = hashCode * 59 + TemplateSetName.GetHashCode();
                    if (Categories != null)
                    hashCode = hashCode * 59 + Categories.GetHashCode();
                    if (Variations != null)
                    hashCode = hashCode * 59 + Variations.GetHashCode();
                    if (RateLimit != null)
                    hashCode = hashCode * 59 + RateLimit.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Bcc != null)
                    hashCode = hashCode * 59 + Bcc.GetHashCode();
                    
                    hashCode = hashCode * 59 + AttachmentsEnabled.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetTemplateSetSuccessResponseData left, GetTemplateSetSuccessResponseData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetTemplateSetSuccessResponseData left, GetTemplateSetSuccessResponseData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
