/*
 * XCom.API
 *
 * This API is responsible for enabling communication with SendGrid. It implements additional features such as data retention and A/B Testing for specific templates
 *
 * The version of the OpenAPI document: 4.0
 * Contact: phil.hotchkiss@veteransunited.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.IO;
using System.Reflection;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Options;
using Microsoft.OpenApi.Models;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Serialization;
using XCom.Application.Commands.CreateTemplateSet;
using XCom.Application.Services;
using XCom.Domain.Interfaces;
using XCom.Infrastructure.Repositories;
using XCom.Infrastructure.Services;
using XCom.Authentication;
using XCom.Filters;
using XCom.OpenApi;
using XCom.Formatters;
using XCom.Configuration;
using SendGrid;

namespace XCom
{
    /// <summary>
    /// Startup via Phil
    /// </summary>
    public class Startup
    {
        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="configuration"></param>
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        /// <summary>
        /// The application configuration.
        /// </summary>
        public IConfiguration Configuration { get; }

        /// <summary>
        /// This method gets called by the runtime. Use this method to add services to the container.
        /// </summary>
        /// <param name="services"></param>
        public void ConfigureServices(IServiceCollection services)
        {
            // Add Memory Cache
            services.AddMemoryCache();

            // Configure SendGrid
            services.Configure<SendGridOptions>(Configuration.GetSection(SendGridOptions.SendGrid));
            services.AddSingleton<ISendGridClient>(sp => 
            {
                var options = sp.GetRequiredService<IOptions<SendGridOptions>>();
                return new SendGridClient(options.Value.ApiKey);
            });

            // Add Repositories
            services.AddScoped<ITemplateSetRepository, TemplateSetRepository>();

            // Add Services
            services.AddScoped<ITemplateSelectionService, TemplateSelectionService>();

            // Register application services
            services.AddScoped<ICreateTemplateSetCommandHandler, CreateTemplateSetCommandHandler>();

            // Add framework services.
            services
                // Don't need the full MVC stack for an API, see https://andrewlock.net/comparing-startup-between-the-asp-net-core-3-templates/
                .AddControllers(options => {
                    options.InputFormatters.Insert(0, new InputFormatterStream());
                })
                .AddNewtonsoftJson(opts =>
                {
                    opts.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
                    opts.SerializerSettings.Converters.Add(new StringEnumConverter
                    {
                        NamingStrategy = new CamelCaseNamingStrategy()
                    });
                });

            // Configure Swagger
            services.AddEndpointsApiExplorer();
            services.AddSwaggerGen(c =>
            {
                c.EnableAnnotations(enableAnnotationsForInheritance: true, enableAnnotationsForPolymorphism: true);
                
                c.SwaggerDoc("4.0", new OpenApiInfo
                {
                    Title = "XCom.API",
                    Description = "XCom.API (ASP.NET Core 3.1)",
                    TermsOfService = new Uri("https://github.com/openapitools/openapi-generator"),
                    Contact = new OpenApiContact
                    {
                        Name = "OpenAPI-Generator Contributors",
                        Url = new Uri("https://github.com/openapitools/openapi-generator"),
                        Email = "phil.hotchkiss@veteransunited.com"
                    },
                    License = new OpenApiLicense
                    {
                        Name = "NoLicense",
                        Url = new Uri("http://localhost")
                    },
                    Version = "4.0",
                });
                c.CustomSchemaIds(type => type.FriendlyId(true));
                c.IncludeXmlComments($"{AppContext.BaseDirectory}{Path.DirectorySeparatorChar}{Assembly.GetExecutingAssembly().GetName().Name}.xml");

                // Include DataAnnotation attributes on Controller Action parameters as OpenAPI validation rules (e.g required, pattern, ..)
                // Use [ValidateModelState] on Actions to actually validate it in C# as well!
                c.OperationFilter<GeneratePathParamsValidationFilter>();
            });
            services
                .AddSwaggerGenNewtonsoftSupport();
        }

        /// <summary>
        /// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        /// </summary>
        /// <param name="app"></param>
        /// <param name="env"></param>
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseSwagger(c => 
                {
                    c.RouteTemplate = "swagger/{documentName}/swagger.json";
                });
                app.UseSwaggerUI(c =>
                {
                    c.SwaggerEndpoint("/swagger/4.0/swagger.json", "XCom API v4.0");
                    c.RoutePrefix = "swagger";
                });
            }
            else
            {
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseDefaultFiles();
            app.UseStaticFiles();
            app.UseRouting();
            app.UseEndpoints(endpoints =>
                {
                    endpoints.MapControllers();
                });
        }
    }
}
