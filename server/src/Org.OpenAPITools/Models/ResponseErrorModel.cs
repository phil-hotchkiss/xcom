/*
 * XCom.API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.0
 * Contact: phil.hotchkiss@veteransunited.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ResponseErrorModel : IEquatable<ResponseErrorModel>
    {
        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets LocationType
        /// </summary>
        [DataMember(Name="locationType", EmitDefaultValue=false)]
        public string LocationType { get; set; }

        /// <summary>
        /// Gets or Sets ExtendedHelp
        /// </summary>
        [DataMember(Name="extendedHelp", EmitDefaultValue=false)]
        public string ExtendedHelp { get; set; }

        /// <summary>
        /// Gets or Sets SendReport
        /// </summary>
        [DataMember(Name="sendReport", EmitDefaultValue=false)]
        public string SendReport { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseErrorModel {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  LocationType: ").Append(LocationType).Append("\n");
            sb.Append("  ExtendedHelp: ").Append(ExtendedHelp).Append("\n");
            sb.Append("  SendReport: ").Append(SendReport).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ResponseErrorModel)obj);
        }

        /// <summary>
        /// Returns true if ResponseErrorModel instances are equal
        /// </summary>
        /// <param name="other">Instance of ResponseErrorModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseErrorModel other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Domain == other.Domain ||
                    Domain != null &&
                    Domain.Equals(other.Domain)
                ) && 
                (
                    Reason == other.Reason ||
                    Reason != null &&
                    Reason.Equals(other.Reason)
                ) && 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    LocationType == other.LocationType ||
                    LocationType != null &&
                    LocationType.Equals(other.LocationType)
                ) && 
                (
                    ExtendedHelp == other.ExtendedHelp ||
                    ExtendedHelp != null &&
                    ExtendedHelp.Equals(other.ExtendedHelp)
                ) && 
                (
                    SendReport == other.SendReport ||
                    SendReport != null &&
                    SendReport.Equals(other.SendReport)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Domain != null)
                    hashCode = hashCode * 59 + Domain.GetHashCode();
                    if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                    if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (LocationType != null)
                    hashCode = hashCode * 59 + LocationType.GetHashCode();
                    if (ExtendedHelp != null)
                    hashCode = hashCode * 59 + ExtendedHelp.GetHashCode();
                    if (SendReport != null)
                    hashCode = hashCode * 59 + SendReport.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ResponseErrorModel left, ResponseErrorModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ResponseErrorModel left, ResponseErrorModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
